import { NextRequest, NextResponse } from 'next/server'
import { memoryStorage } from '@/lib/memory-storage'

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Loading sample data...')
    
    // Load sample data manually
    memoryStorage.loadSampleDataManually()
    
    console.log('‚úÖ Sample data loaded successfully')
    
    return NextResponse.json({
      success: true,
      message: '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      timestamp: new Date().toISOString(),
      data: {
        teams: memoryStorage.allTeams.length,
        members: memoryStorage.allMembers.length,
        customers: memoryStorage.allCustomers.length,
        customerCounts: memoryStorage.allCustomerCounts.length,
        salaries: memoryStorage.allSalaries.length,
        bonuses: memoryStorage.allBonuses.length,
        commissions: memoryStorage.allCommissions.length,
        categories: memoryStorage.allCategories.length,
        transactions: memoryStorage.allTransactions.length,
        incomeCategories: memoryStorage.allCategories.filter(c => c.type === 'income').length,
        expenseCategories: memoryStorage.allCategories.filter(c => c.type === 'expense').length,
        incomeTransactions: memoryStorage.allTransactions.filter(t => t.type === 'income').length,
        expenseTransactions: memoryStorage.allTransactions.filter(t => t.type === 'expense').length,
        totalIncome: memoryStorage.allTransactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0),
        totalExpense: memoryStorage.allTransactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0)
      }
    })
    
  } catch (error) {
    console.error('‚ùå Failed to load sample data:', error)
    return NextResponse.json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ',
      message: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'
    }, { status: 500 })
  }
}