'use client'

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Textarea } from '@/components/ui/textarea'
import { Tags, Plus, Edit, Trash2, TrendingUp, TrendingDown, DollarSign } from 'lucide-react'

export function CategoryManagement() {
  const [categories, setCategories] = useState([
    {
      id: 1,
      name: '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
      description: '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤',
      type: 'expense',
      color: 'blue',
      budget: 50000,
      spent: 35000,
      icon: 'üì¢'
    },
    {
      id: 2,
      name: '‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢',
      description: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
      type: 'income',
      color: 'green',
      budget: 200000,
      spent: 150000,
      icon: 'üí∞'
    },
    {
      id: 3,
      name: '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô',
      description: '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
      type: 'expense',
      color: 'orange',
      budget: 30000,
      spent: 22000,
      icon: '‚öôÔ∏è'
    },
    {
      id: 4,
      name: '‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á/‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
      description: '‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
      type: 'expense',
      color: 'red',
      budget: 100000,
      spent: 100000,
      icon: 'üíº'
    },
    {
      id: 5,
      name: '‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ',
      description: '‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ‡∏ô‡πâ‡∏≥ ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï',
      type: 'expense',
      color: 'yellow',
      budget: 10000,
      spent: 7500,
      icon: 'üí°'
    },
    {
      id: 6,
      name: '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤',
      description: '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
      type: 'expense',
      color: 'purple',
      budget: 25000,
      spent: 25000,
      icon: 'üè¢'
    }
  ])

  const [newCategory, setNewCategory] = useState({
    name: '',
    description: '',
    type: '',
    budget: '',
    icon: ''
  })

  const [filterType, setFilterType] = useState('all')

  const handleAddCategory = () => {
    if (newCategory.name && newCategory.description && newCategory.type) {
      const category = {
        id: categories.length + 1,
        ...newCategory,
        budget: parseInt(newCategory.budget) || 0,
        spent: 0,
        color: ['blue', 'green', 'orange', 'red', 'yellow', 'purple'][categories.length % 6]
      }
      setCategories([...categories, category])
      setNewCategory({ name: '', description: '', type: '', budget: '', icon: '' })
    }
  }

  const handleDeleteCategory = (id: number) => {
    setCategories(categories.filter(cat => cat.id !== id))
  }

  const filteredCategories = categories.filter(cat => 
    filterType === 'all' || cat.type === filterType
  )

  const totalBudget = filteredCategories.reduce((sum, cat) => sum + cat.budget, 0)
  const totalSpent = filteredCategories.reduce((sum, cat) => sum + cat.spent, 0)
  const remaining = totalBudget - totalSpent

  const getCategoryColor = (color: string) => {
    const colors: { [key: string]: string } = {
      blue: 'bg-blue-100 text-blue-800 border-blue-200',
      green: 'bg-green-100 text-green-800 border-green-200',
      orange: 'bg-orange-100 text-orange-800 border-orange-200',
      red: 'bg-red-100 text-red-800 border-red-200',
      yellow: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      purple: 'bg-purple-100 text-purple-800 border-purple-200'
    }
    return colors[color] || 'bg-gray-100 text-gray-800 border-gray-200'
  }

  const getBudgetPercentage = (spent: number, budget: number) => {
    if (budget === 0) return 0
    return Math.min((spent / budget) * 100, 100)
  }

  const getBudgetColor = (percentage: number) => {
    if (percentage >= 90) return 'bg-red-500'
    if (percentage >= 70) return 'bg-yellow-500'
    return 'bg-green-500'
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h1>
        <p className="text-gray-600 mt-2">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</p>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏°</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">‡∏ø{totalBudget.toLocaleString()}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">‡∏ø{totalSpent.toLocaleString()}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</CardTitle>
          </CardHeader>
          <CardContent>
            <div className={`text-2xl font-bold ${remaining >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              ‡∏ø{remaining.toLocaleString()}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{filteredCategories.length}</div>
          </CardContent>
        </Card>
      </div>

      {/* Filter and Add */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Tags className="h-5 w-5" />
            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
          </CardTitle>
          <div className="flex gap-2">
            <Select value={filterType} onValueChange={setFilterType}>
              <SelectTrigger className="w-32">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</SelectItem>
                <SelectItem value="income">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</SelectItem>
                <SelectItem value="expense">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</SelectItem>
              </SelectContent>
            </Select>
            <Dialog>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="h-4 w-4 mr-2" />
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà</DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="category-name">‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</Label>
                    <Input
                      id="category-name"
                      value={newCategory.name}
                      onChange={(e) => setNewCategory({ ...newCategory, name: e.target.value })}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="category-description">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</Label>
                    <Textarea
                      id="category-description"
                      value={newCategory.description}
                      onChange={(e) => setNewCategory({ ...newCategory, description: e.target.value })}
                      placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà..."
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="category-type">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</Label>
                    <Select value={newCategory.type} onValueChange={(value) => setNewCategory({ ...newCategory, type: value })}>
                      <SelectTrigger>
                        <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="income">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</SelectItem>
                        <SelectItem value="expense">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="category-budget">‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</Label>
                    <Input
                      id="category-budget"
                      type="number"
                      value={newCategory.budget}
                      onChange={(e) => setNewCategory({ ...newCategory, budget: e.target.value })}
                      placeholder="0"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="category-icon">‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (Emoji)</Label>
                    <Input
                      id="category-icon"
                      value={newCategory.icon}
                      onChange={(e) => setNewCategory({ ...newCategory, icon: e.target.value })}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô üì¢, üí∞, ‚öôÔ∏è"
                    />
                  </div>
                  <Button onClick={handleAddCategory} className="w-full">
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredCategories.map((category) => {
              const percentage = getBudgetPercentage(category.spent, category.budget)
              return (
                <Card key={category.id} className="relative">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <span className="text-2xl">{category.icon}</span>
                        <div>
                          <CardTitle className="text-lg">{category.name}</CardTitle>
                          <Badge 
                            variant={category.type === 'income' ? 'default' : 'secondary'}
                            className="mt-1"
                          >
                            {category.type === 'income' ? '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö' : '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'}
                          </Badge>
                        </div>
                      </div>
                      <div className="flex gap-1">
                        <Button variant="ghost" size="sm">
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="text-red-600 hover:text-red-700"
                          onClick={() => handleDeleteCategory(category.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-gray-600 mb-4">{category.description}</p>
                    
                    {category.type === 'expense' && category.budget > 0 && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</span>
                          <span className="font-medium">‡∏ø{category.budget.toLocaleString()}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span>‡πÉ‡∏ä‡πâ‡πÑ‡∏õ</span>
                          <span className="font-medium text-red-600">‡∏ø{category.spent.toLocaleString()}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</span>
                          <span className={`font-medium ${category.budget - category.spent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                            ‡∏ø{(category.budget - category.spent).toLocaleString()}
                          </span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                          <div
                            className={`h-2 rounded-full ${getBudgetColor(percentage)}`}
                            style={{ width: `${percentage}%` }}
                          />
                        </div>
                        <p className="text-xs text-gray-500 text-center mt-1">
                          {percentage.toFixed(1)}% ‡∏Ç‡∏≠‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                        </p>
                      </div>
                    )}

                    {category.type === 'income' && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</span>
                          <span className="font-medium">‡∏ø{category.budget.toLocaleString()}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span>‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß</span>
                          <span className="font-medium text-green-600">‡∏ø{category.spent.toLocaleString()}</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                          <div
                            className="bg-green-500 h-2 rounded-full"
                            style={{ width: `${percentage}%` }}
                          />
                        </div>
                        <p className="text-xs text-gray-500 text-center mt-1">
                          {percentage.toFixed(1)}% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
                        </p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}