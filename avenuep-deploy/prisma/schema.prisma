// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  leader      String?
  budget      Int      @default(0)
  color       String   @default("blue")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     Member[]
  transactions Transaction[]
  customers   Customer[]
}

model Member {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phone         String?
  role          String    @default("สมาชิก")
  position      String?
  department    String?
  salary        Int       @default(0)
  hireDate      DateTime  @default(now())
  status        String    @default("active")
  teamId        String?
  team          Team?     @relation(fields: [teamId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  salaries      Salary[]
  commissions   Commission[]
  bonuses       Bonus[]
  transactions  Transaction[]
  customers     Customer[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // "income" or "expense"
  budget      Int      @default(0)
  spent       Int      @default(0)
  color       String   @default("blue")
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Int
  type        String   // "income" or "expense"
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  teamId      String?
  team        Team?    @relation(fields: [teamId], references: [id])
  memberId    String?
  member      Member?  @relation(fields: [memberId], references: [id])
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Salary {
  id          String   @id @default(cuid())
  memberId    String
  member      Member   @relation(fields: [memberId], references: [id])
  amount      Int
  payDate     DateTime
  month       Int      // 1-12
  year        Int
  status      String   @default("pending") // "pending", "paid", "cancelled"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bonus {
  id          String   @id @default(cuid())
  memberId    String
  member      Member   @relation(fields: [memberId], references: [id])
  amount      Int
  reason      String?
  date        DateTime @default(now())
  status      String   @default("pending") // "pending", "paid", "cancelled"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Commission {
  id          String   @id @default(cuid())
  memberId    String
  member      Member   @relation(fields: [memberId], references: [id])
  amount      Int
  percentage  Float?
  salesAmount Int?
  description String?
  date        DateTime @default(now())
  status      String   @default("pending") // "pending", "paid", "cancelled"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id            String   @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  type          String   @default("new") // "new", "deposit", "extension"
  initialAmount Int      @default(0)
  teamId        String?
  team          Team?    @relation(fields: [teamId], references: [id])
  memberId      String?
  member        Member?  @relation(fields: [memberId], references: [id])
  status        String   @default("active") // "active", "inactive", "blacklist"
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  transactions  CustomerTransaction[]
}

model CustomerTransaction {
  id          String   @id @default(cuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  amount      Int
  type        String   // "deposit", "withdrawal", "extension"
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}