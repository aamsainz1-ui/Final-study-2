#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Authentication System...\n');

// ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á bcrypt ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
try {
  require('bcryptjs');
} catch (error) {
  console.log('üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á bcryptjs...');
  const { execSync } = require('child_process');
  execSync('npm install bcryptjs', { stdio: 'inherit' });
}

const bcrypt = require('bcryptjs');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
function generatePassword(length = 6) {
  const digits = '0123456789';
  let password = '';
  for (let i = 0; i < length; i++) {
    password += digits.charAt(Math.floor(Math.random() * digits.length));
  }
  return password;
}

const newPassword = generatePassword(6);
console.log('üîë ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:', newPassword);

// Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ bcrypt (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà auth-server.ts ‡πÉ‡∏ä‡πâ)
bcrypt.hash(newPassword, 12).then(async (hashedPassword) => {
  console.log('üîê Hashed password (bcrypt):', hashedPassword.substring(0, 50) + '...');
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Prisma
  const prismaDbPath = path.join(__dirname, 'prisma', 'db', 'custom_new.db');
  
  if (fs.existsSync(prismaDbPath)) {
    try {
      const Database = require('better-sqlite3');
      const db = new Database(prismaDbPath);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const tableExists = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='users'").get();
      
      if (tableExists) {
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        const deleteStmt = db.prepare('DELETE FROM users WHERE role = ? OR role = ?');
        const deleteResult = deleteStmt.run('OWNER', 'owner');
        console.log(`üóëÔ∏è ‡∏•‡∏ö Owner ‡πÄ‡∏Å‡πà‡∏≤ ${deleteResult.changes} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Owner ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ bcrypt hash
        const insertStmt = db.prepare(`
          INSERT INTO users (name, email, password, role, status, created_at, updated_at) 
          VALUES (?, ?, ?, ?, ?, ?, ?)
        `);
        
        const newOwner = {
          name: 'System Owner',
          email: 'owner@website.com',
          password: hashedPassword,
          role: 'OWNER',
          status: 'active',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        const result = insertStmt.run(
          newOwner.name,
          newOwner.email,
          newOwner.password,
          newOwner.role,
          newOwner.status,
          newOwner.created_at,
          newOwner.updated_at
        );
        
        if (result.changes > 0) {
          console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Owner ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
          console.log('üÜî ID:', result.lastInsertRowid);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á
          const verifyOwner = db.prepare('SELECT * FROM users WHERE role = ?').get('OWNER');
          if (verifyOwner) {
            console.log('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Owner ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.log('üë§ ‡∏ä‡∏∑‡πà‡∏≠:', verifyOwner.name);
            console.log('üìß Email:', verifyOwner.email);
            console.log('üîë Role:', verifyOwner.role);
            console.log('üìä Status:', verifyOwner.status);
          }
        }
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á users');
      }
      
      db.close();
    } catch (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    }
  }
  
  console.log('\nüéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Login ‡πÉ‡∏´‡∏°‡πà:');
  console.log('   üìß Email: owner@website.com');
  console.log('   üîë Password: ' + newPassword);
  console.log('\n‚ö†Ô∏è  ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô PIN 6 ‡∏´‡∏•‡∏±‡∏Å');
  console.log('üîó ‡πÑ‡∏õ‡∏ó‡∏µ‡πà http://localhost:3000/login');
  console.log('\nüîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó server ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á login ‡πÉ‡∏´‡∏°‡πà');
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ verify ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ verify ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô...');
  const isValid = await bcrypt.compare(newPassword, hashedPassword);
  console.log('‚úÖ ‡∏Å‡∏≤‡∏£ verify ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:', isValid ? '‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' : '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
  
}).catch(error => {
  console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:', error.message);
});