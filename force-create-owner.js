#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('ЁЯФз р╕кр╕гр╣Йр╕▓р╕З Owner р╕Ьр╣Ир╕▓р╕Щ Database р╣Вр╕Фр╕вр╕Хр╕гр╕З...\n');

// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И
function generatePassword(length = 6) {
  const digits = '0123456789';
  let password = '';
  for (let i = 0; i < length; i++) {
    password += digits.charAt(Math.floor(Math.random() * digits.length));
  }
  return password;
}

// р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И
const newPassword = generatePassword(6);
const hashedPassword = crypto.createHash('sha256').update(newPassword).digest('hex');

console.log('ЁЯФС р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И (PIN 6 р╕лр╕ер╕▒р╕Б):', newPassword);
console.log('ЁЯФР Hashed password:', hashedPassword);

// р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З better-sqlite3 р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З
try {
  require('better-sqlite3');
} catch (error) {
  console.log('ЁЯУж р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З better-sqlite3...');
  const { execSync } = require('child_process');
  execSync('npm install better-sqlite3', { stdio: 'inherit' });
}

const Database = require('better-sqlite3');

// р╕ер╕нр╕Зр╕Бр╕▒р╕Ър╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╣Ир╕▓р╕Зр╣Ж
const dbPaths = [
  path.join(__dirname, 'prisma', 'db', 'custom_new.db'),
  path.join(__dirname, 'db', 'custom.db'),
  path.join(__dirname, 'avenuep-deploy', 'prisma', 'db', 'custom_new.db')
];

let ownerCreated = false;

for (const dbPath of dbPaths) {
  if (fs.existsSync(dbPath)) {
    console.log(`\nЁЯУБ р╕ер╕нр╕Зр╕Бр╕▒р╕Ър╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е: ${dbPath}`);
    
    try {
      const db = new Database(dbPath);
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡р╕Хр╕▓р╕гр╕▓р╕З users р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
      const tableExists = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='users'").get();
      
      if (tableExists) {
        console.log('тЬЕ р╕Юр╕Ър╕Хр╕▓р╕гр╕▓р╕З users');
        
        // р╕ер╕Ъ Owner р╣Ар╕Бр╣Ир╕▓р╕Цр╣Йр╕▓р╕бр╕╡
        const deleteStmt = db.prepare('DELETE FROM users WHERE role = ? OR role = ?');
        const deleteResult = deleteStmt.run('OWNER', 'owner');
        console.log(`ЁЯЧСя╕П р╕ер╕Ъ Owner р╣Ар╕Бр╣Ир╕▓ ${deleteResult.changes} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);
        
        // р╕кр╕гр╣Йр╕▓р╕З Owner р╣Гр╕лр╕бр╣И
        const insertStmt = db.prepare(`
          INSERT INTO users (name, email, password, role, status, created_at, updated_at) 
          VALUES (?, ?, ?, ?, ?, ?, ?)
        `);
        
        const newOwner = {
          name: 'System Owner',
          email: 'owner@website.com',
          password: hashedPassword,
          role: 'OWNER',
          status: 'active',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        const result = insertStmt.run(
          newOwner.name,
          newOwner.email,
          newOwner.password,
          newOwner.role,
          newOwner.status,
          newOwner.created_at,
          newOwner.updated_at
        );
        
        if (result.changes > 0) {
          console.log('тЬЕ р╕кр╕гр╣Йр╕▓р╕З Owner р╕кр╕│р╣Ар╕гр╣Зр╕И!');
          console.log('ЁЯЖФ ID:', result.lastInsertRowid);
          ownerCreated = true;
          
          // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕кр╕гр╣Йр╕▓р╕Зр╕Ир╕гр╕┤р╕З
          const verifyOwner = db.prepare('SELECT * FROM users WHERE role = ?').get('OWNER');
          if (verifyOwner) {
            console.log('тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З Owner р╕кр╕│р╣Ар╕гр╣Зр╕И');
            console.log('ЁЯСд р╕Кр╕╖р╣Ир╕н:', verifyOwner.name);
            console.log('ЁЯУз Email:', verifyOwner.email);
            console.log('ЁЯФС Role:', verifyOwner.role);
            console.log('ЁЯУК Status:', verifyOwner.status);
          }
        }
      } else {
        console.log('тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Хр╕▓р╕гр╕▓р╕З users');
        
        // р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕З users
        console.log('ЁЯФз р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕З users...');
        const createTableStmt = db.prepare(`
          CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            role TEXT NOT NULL DEFAULT 'USER',
            status TEXT NOT NULL DEFAULT 'active',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
          )
        `);
        
        createTableStmt.run();
        console.log('тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕З users р╕кр╕│р╣Ар╕гр╣Зр╕И');
        
        // р╕кр╕гр╣Йр╕▓р╕З Owner
        const insertStmt = db.prepare(`
          INSERT INTO users (name, email, password, role, status, created_at, updated_at) 
          VALUES (?, ?, ?, ?, ?, ?, ?)
        `);
        
        const newOwner = {
          name: 'System Owner',
          email: 'owner@website.com',
          password: hashedPassword,
          role: 'OWNER',
          status: 'active',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        const result = insertStmt.run(
          newOwner.name,
          newOwner.email,
          newOwner.password,
          newOwner.role,
          newOwner.status,
          newOwner.created_at,
          newOwner.updated_at
        );
        
        if (result.changes > 0) {
          console.log('тЬЕ р╕кр╕гр╣Йр╕▓р╕З Owner р╕кр╕│р╣Ар╕гр╣Зр╕И!');
          console.log('ЁЯЖФ ID:', result.lastInsertRowid);
          ownerCreated = true;
        }
      }
      
      db.close();
    } catch (error) {
      console.log('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф:', error.message);
    }
    
    if (ownerCreated) {
      break;
    }
  }
}

if (ownerCreated) {
  console.log('\nЁЯОЙ р╕кр╕гр╣Йр╕▓р╕З Owner р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з!');
  console.log('ЁЯОп р╣Гр╕Кр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕╡р╣Йр╣Гр╕Щр╕Бр╕▓р╕г login:');
  console.log('   ЁЯУз Email: owner@website.com');
  console.log('   ЁЯФС Password: ' + newPassword);
  console.log('\nтЪая╕П  р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щ PIN 6 р╕лр╕ер╕▒р╕Б');
  console.log('ЁЯФЧ р╣Др╕Ыр╕Чр╕╡р╣И http://localhost:3000/login');
  console.log('\nЁЯУБ р╕лр╕ер╕▒р╕З login р╣Бр╕ер╣Йр╕з р╕Др╕╕р╕Ур╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З File Manager р╣Др╕Фр╣Йр╕Чр╕╡р╣И:');
  console.log('   ЁЯСЖ р╕Др╕ер╕┤р╕Б "р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╣Др╕Яр╕ер╣М" р╣Гр╕Щр╣Ар╕бр╕Щр╕╣р╕Фр╣Йр╕▓р╕Щр╕Лр╣Йр╕▓р╕в');
} else {
  console.log('\nтЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕З Owner р╣Др╕Фр╣Йр╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Фр╣Ж');
  console.log('р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡р╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕вр╕╣р╣Ир╕Ир╕гр╕┤р╕З');
}