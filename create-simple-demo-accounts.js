#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á Demo Accounts ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢...\n');

// ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á bcryptjs ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
try {
  require('bcryptjs');
} catch (error) {
  console.log('üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á bcryptjs...');
  const { execSync } = require('child_process');
  execSync('npm install bcryptjs', { stdio: 'inherit' });
}

const bcrypt = require('bcryptjs');

// Demo accounts ‡∏ï‡∏≤‡∏° login page
const demoAccounts = [
  { username: 'owner', name: 'System Owner', role: 'OWNER', password: '123456' },
  { username: 'admin', name: 'System Admin', role: 'ADMIN', password: '123456' },
  { username: 'editor', name: 'Content Editor', role: 'EDITOR', password: '123456' },
  { username: 'viewer', name: 'Content Viewer', role: 'VIEWER', password: '123456' }
];

async function createDemoAccounts() {
  const prismaDbPath = path.join(__dirname, 'prisma', 'db', 'custom_new.db');
  
  if (fs.existsSync(prismaDbPath)) {
    try {
      const Database = require('better-sqlite3');
      const db = new Database(prismaDbPath);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const tableExists = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='users'").get();
      
      if (tableExists) {
        console.log('üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Demo Accounts...\n');
        
        for (const account of demoAccounts) {
          // Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
          const hashedPassword = await bcrypt.hash(account.password, 12);
          
          // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
          const deleteStmt = db.prepare('DELETE FROM users WHERE username = ?');
          deleteStmt.run(account.username);
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ column ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
          const insertStmt = db.prepare(`
            INSERT INTO users (name, email, username, password, role, status, created_at, updated_at, isActive) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
          `);
          
          const result = insertStmt.run(
            account.name,
            `${account.username}@local.user`,
            account.username,
            hashedPassword,
            account.role,
            'active',
            new Date().toISOString(),
            new Date().toISOString(),
            1 // isActive = true
          );
          
          if (result.changes > 0) {
            console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ${account.username} (${account.role}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
          }
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        console.log('\nüéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Login ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
        console.log('================================');
        
        for (const account of demoAccounts) {
          console.log(`üë§ ${account.name} (${account.role})`);
          console.log(`   Username: ${account.username}`);
          console.log(`   Password: ${account.password}`);
          console.log('');
        }
        
        console.log('üîó ‡πÑ‡∏õ‡∏ó‡∏µ‡πà http://localhost:3000/login');
        console.log('üìÅ ‡∏´‡∏•‡∏±‡∏á login ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á File Manager ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå"');
        
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á users');
      }
      
      db.close();
    } catch (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    }
  } else {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  }
}

createDemoAccounts().then(() => {
  console.log('\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á Demo Accounts ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  console.log('üîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó server ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á login ‡πÉ‡∏´‡∏°‡πà');
}).catch(error => {
  console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
});