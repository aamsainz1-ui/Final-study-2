#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ыр╕▒р╕Нр╕лр╕▓ Login...\n');

// р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З better-sqlite3 р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З
try {
  require('better-sqlite3');
} catch (error) {
  console.log('ЁЯУж р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З better-sqlite3...');
  const { execSync } = require('child_process');
  execSync('npm install better-sqlite3', { stdio: 'inherit' });
}

const Database = require('better-sqlite3');

// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ hash р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ
function hashPassword(password) {
  return crypto.createHash('sha256').update(password).digest('hex');
}

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
const dbPaths = [
  path.join(__dirname, 'prisma', 'db', 'custom_new.db'),
  path.join(__dirname, 'db', 'custom.db'),
  path.join(__dirname, 'avenuep-deploy', 'prisma', 'db', 'custom_new.db')
];

let foundDb = false;
let foundUsers = [];

for (const dbPath of dbPaths) {
  if (fs.existsSync(dbPath)) {
    console.log(`ЁЯУБ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е: ${dbPath}`);
    
    try {
      const db = new Database(dbPath);
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡р╕Хр╕▓р╕гр╕▓р╕З users р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
      const tableExists = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='users'").get();
      
      if (tableExists) {
        console.log('тЬЕ р╕Юр╕Ър╕Хр╕▓р╕гр╕▓р╕З users');
        
        // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
        const users = db.prepare('SELECT * FROM users').all();
        
        if (users.length > 0) {
          console.log(`ЁЯУК р╕Юр╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й ${users.length} р╕гр╕▓р╕вр╕Бр╕▓р╕г:\n`);
          
          users.forEach((user, index) => {
            console.log(`${index + 1}. ID: ${user.id}`);
            console.log(`   р╕Кр╕╖р╣Ир╕н: ${user.name}`);
            console.log(`   Email: ${user.email}`);
            console.log(`   Role: ${user.role}`);
            console.log(`   Status: ${user.status}`);
            console.log(`   Password: ${user.password ? 'р╕бр╕╡р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ (' + user.password.substring(0, 20) + '...)' : 'р╣Др╕бр╣Ир╕бр╕╡'}`);
            console.log(`   Created: ${user.created_at}`);
            console.log('');
            
            foundUsers.push(user);
          });
        } else {
          console.log('тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е');
        }
      } else {
        console.log('тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Хр╕▓р╕гр╕▓р╕З users');
      }
      
      db.close();
      foundDb = true;
    } catch (error) {
      console.log('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф:', error.message);
    }
  }
}

if (!foundDb) {
  console.log('тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Фр╣Ж');
}

// р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕г login
if (foundUsers.length > 0) {
  console.log('ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕г login...\n');
  
  foundUsers.forEach(user => {
    console.log(`р╕Чр╕Фр╕кр╕нр╕Ър╕кр╕│р╕лр╕гр╕▒р╕Ъ: ${user.email} (${user.role})`);
    
    // р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╣Др╕Ыр╣Др╕Фр╣Й
    const testPasswords = [
      '433035',  // р╕гр╕лр╕▒р╕кр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╣Др╕зр╣Й
      'owner@website.com',  // р╕нр╕▓р╕Ир╕Ир╕░р╣Гр╕Кр╣Й email р╣Ар╕Ыр╣Зр╕Щр╕гр╕лр╕▒р╕к
      'password',  // р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Чр╕▒р╣Ир╕зр╣Др╕Ы
      '123456',  // PIN р╕Чр╕▒р╣Ир╕зр╣Др╕Ы
      'owner',  // р╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
    ];
    
    testPasswords.forEach(testPass => {
      const hashedTest = hashPassword(testPass);
      const isMatch = hashedTest === user.password;
      
      if (isMatch) {
        console.log(`тЬЕ р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З: "${testPass}"`);
        console.log(`ЁЯОп р╣Гр╕Кр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕╡р╣Й login:`);
        console.log(`   Email: ${user.email}`);
        console.log(`   Password: ${testPass}`);
        console.log('');
      }
    });
    
    if (!testPasswords.some(pass => hashPassword(pass) === user.password)) {
      console.log(`тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Щ`);
      console.log(`ЁЯФз р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕лр╕гр╕╖р╕нр╣Др╕бр╣И?`);
      console.log('');
    }
  });
}

// р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕Юр╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й р╣Гр╕лр╣Йр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕лр╕бр╣И
if (foundUsers.length === 0) {
  console.log('ЁЯФз р╣Др╕бр╣Ир╕Юр╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕З Owner р╣Гр╕лр╕бр╣И...\n');
  
  // р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И
  function generatePassword(length = 6) {
    const digits = '0123456789';
    let password = '';
    for (let i = 0; i < length; i++) {
      password += digits.charAt(Math.floor(Math.random() * digits.length));
    }
    return password;
  }
  
  const newPassword = generatePassword(6);
  const hashedPassword = hashPassword(newPassword);
  
  console.log(`ЁЯФС р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И: ${newPassword}`);
  console.log(`ЁЯФР Hashed: ${hashedPassword}`);
  
  // р╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕гр╕Бр╕Чр╕╡р╣Ир╕Юр╕Ъ
  for (const dbPath of dbPaths) {
    if (fs.existsSync(dbPath)) {
      try {
        const db = new Database(dbPath);
        
        // р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▓р╕гр╕▓р╕Зр╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡
        const createTableStmt = db.prepare(`
          CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            role TEXT NOT NULL DEFAULT 'USER',
            status TEXT NOT NULL DEFAULT 'active',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
          )
        `);
        createTableStmt.run();
        
        // р╕кр╕гр╣Йр╕▓р╕З Owner
        const insertStmt = db.prepare(`
          INSERT OR REPLACE INTO users (name, email, password, role, status, created_at, updated_at) 
          VALUES (?, ?, ?, ?, ?, ?, ?)
        `);
        
        const result = insertStmt.run(
          'System Owner',
          'owner@website.com',
          hashedPassword,
          'OWNER',
          'active',
          new Date().toISOString(),
          new Date().toISOString()
        );
        
        if (result.changes > 0) {
          console.log('тЬЕ р╕кр╕гр╣Йр╕▓р╕З Owner р╕кр╕│р╣Ар╕гр╣Зр╕И!');
          console.log('ЁЯОп р╣Гр╕Кр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕╡р╣Й login:');
          console.log(`   Email: owner@website.com`);
          console.log(`   Password: ${newPassword}`);
        }
        
        db.close();
        break;
      } catch (error) {
        console.log('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф:', error.message);
      }
    }
  }
}

console.log('\nЁЯФД р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕╡р╕кр╕Хр╕▓р╕гр╣Мр╕Ч server р╣Бр╕ер╣Йр╕зр╕ер╕нр╕З login р╣Гр╕лр╕бр╣И');