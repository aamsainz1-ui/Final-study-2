// Node.js 18+ has built-in fetch

// Base URL
const BASE_URL = 'http://localhost:3000';

// Function to test API endpoints
async function testEndpoint(method, endpoint, data = null) {
  try {
    const config = {
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    if (data && (method === 'POST' || method === 'PUT')) {
      config.body = JSON.stringify(data);
    }

    const response = await fetch(`${BASE_URL}${endpoint}`, config);
    const result = await response.json();
    
    console.log(`\n=== ${method} ${endpoint} ===`);
    console.log(`Status: ${response.status}`);
    console.log(`Response:`, JSON.stringify(result, null, 2));
    
    return { success: response.ok, data: result, status: response.status };
  } catch (error) {
    console.error(`\nтЭМ Error testing ${method} ${endpoint}:`, error.message);
    return { success: false, error: error.message };
  }
}

// Main test function
async function runFinalTest() {
  console.log('ЁЯзк р╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕вр╕лр╕ер╕▒р╕Зр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕Вр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф...\n');
  
  const results = [];
  
  // First, get existing data to use correct IDs
  console.log('ЁЯУК р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣И...');
  
  const teamsResponse = await testEndpoint('GET', '/api/teams');
  const membersResponse = await testEndpoint('GET', '/api/members');
  const categoriesResponse = await testEndpoint('GET', '/api/categories');
  const customersResponse = await testEndpoint('GET', '/api/customers');
  
  // Extract existing IDs
  const existingTeam = teamsResponse.success && teamsResponse.data.length > 0 ? teamsResponse.data[0] : null;
  const existingMember = membersResponse.success && membersResponse.data.length > 0 ? membersResponse.data[0] : null;
  const existingCategory = categoriesResponse.success && categoriesResponse.data.length > 0 ? categoriesResponse.data[0] : null;
  const existingCustomer = customersResponse.success && customersResponse.data.length > 0 ? customersResponse.data[0] : null;
  
  console.log('\nЁЯФН р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Чр╕Фр╕кр╕нр╕Ъ:');
  console.log('Team:', existingTeam?.id, existingTeam?.name);
  console.log('Member:', existingMember?.id, existingMember?.name);
  console.log('Category:', existingCategory?.id, existingCategory?.name);
  console.log('Customer:', existingCustomer?.id, existingCustomer?.name);
  
  // Test data with correct existing IDs
  const testData = {
    team: {
      name: 'р╕Чр╕╡р╕бр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      description: 'р╕Чр╕╡р╕бр╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      leader: 'р╕лр╕▒р╕зр╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╕бр╕Чр╕Фр╕кр╕нр╕Ъ',
      budget: 50000,
      color: 'blue'
    },
    member: existingTeam ? {
      name: 'р╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      phone: '0800000099',
      salary: 25000,
      teamId: existingTeam.id,
      position: 'р╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щр╕Чр╕Фр╕кр╕нр╕Ъ',
      role: 'Tester',
      department: 'QA',
      bankName: 'р╕Шр╕Щр╕▓р╕Др╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ',
      bankAccount: '1234567899',
      bankBranch: 'р╕кр╕▓р╕Вр╕▓р╕Чр╕Фр╕кр╕нр╕Ъ'
    } : null,
    customer: existingTeam && existingMember ? {
      name: 'р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      phone: '0900000099',
      address: 'р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      type: 'new',
      initialAmount: 5000,
      extensionAmount: 1000,
      teamId: existingTeam.id,
      memberId: existingMember.id
    } : null,
    transaction: existingCategory && existingMember ? {
      title: 'р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      description: 'р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      amount: 1000,
      type: 'income',
      categoryId: existingCategory.id,
      memberId: existingMember.id,
      customerId: existingCustomer?.id || null
    } : null,
    category: {
      name: 'р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      description: 'р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      type: 'expense',
      budget: 10000,
      color: 'purple',
      icon: 'ЁЯзк'
    },
    salary: existingMember ? {
      memberId: existingMember.id,
      amount: 15000,
      month: 'р╕бр╕┤р╕Цр╕╕р╕Щр╕▓р╕вр╕Щ',
      year: 2024,
      bonus: 1000,
      deduction: 500,
      status: 'pending'
    } : null,
    bonus: existingMember ? {
      memberId: existingMember.id,
      amount: 2000,
      reason: 'р╣Вр╕Ър╕Щр╕▒р╕кр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      date: new Date().toISOString(),
      status: 'pending'
    } : null,
    commission: existingMember && existingCustomer ? {
      memberId: existingMember.id,
      customerId: existingCustomer.id,
      amount: 500,
      percentage: 5,
      description: 'р╕Др╣Ир╕▓р╕Др╕нр╕бр╕бр╕┤р╕Кр╕Кр╕▒р╕Щр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      salesAmount: 10000,
      status: 'pending'
    } : null,
    customerTransaction: existingCustomer ? {
      customerId: existingCustomer.id,
      amount: 500,
      description: 'р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в',
      type: 'payment',
      date: new Date().toISOString()
    } : null
  };
  
  // Test Teams
  console.log('\nЁЯУЛ р╕Чр╕Фр╕кр╕нр╕Ъ Teams');
  results.push(await testEndpoint('POST', '/api/teams', testData.team));
  
  // Test Members
  if (testData.member) {
    console.log('\nЁЯСе р╕Чр╕Фр╕кр╕нр╕Ъ Members');
    results.push(await testEndpoint('POST', '/api/members', testData.member));
    results.push(await testEndpoint('PUT', `/api/members/${existingMember.id}`, { 
      name: `${existingMember.name} (р╕Чр╕Фр╕кр╕нр╕Ър╣Бр╕Бр╣Йр╣Др╕В)`, 
      phone: existingMember.phone 
    }));
  }
  
  // Test Customers
  if (testData.customer) {
    console.log('\nЁЯСд р╕Чр╕Фр╕кр╕нр╕Ъ Customers');
    results.push(await testEndpoint('POST', '/api/customers', testData.customer));
  }
  
  if (existingCustomer) {
    results.push(await testEndpoint('PUT', `/api/customers/${existingCustomer.id}`, { 
      name: `${existingCustomer.name} (р╣Бр╕Бр╣Йр╣Др╕В)`, 
      notes: 'р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕р╕Чр╕Фр╕кр╕нр╕Ър╣Бр╕Бр╣Йр╣Др╕В' 
    }));
  }
  
  // Test Categories
  console.log('\nЁЯУБ р╕Чр╕Фр╕кр╕нр╕Ъ Categories');
  results.push(await testEndpoint('POST', '/api/categories', testData.category));
  
  if (existingCategory) {
    results.push(await testEndpoint('PUT', `/api/categories/${existingCategory.id}`, { 
      name: `${existingCategory.name} (р╣Бр╕Бр╣Йр╣Др╕В)`, 
      budget: 600000,
      type: existingCategory.type
    }));
  }
  
  // Test Transactions
  if (testData.transaction) {
    console.log('\nЁЯТ░ р╕Чр╕Фр╕кр╕нр╕Ъ Transactions');
    results.push(await testEndpoint('POST', '/api/transactions', testData.transaction));
  }
  
  // Test Salaries
  if (testData.salary) {
    console.log('\nЁЯТ╡ р╕Чр╕Фр╕кр╕нр╕Ъ Salaries');
    results.push(await testEndpoint('POST', '/api/salaries', testData.salary));
  }
  
  // Test Bonuses
  if (testData.bonus) {
    console.log('\nЁЯОБ р╕Чр╕Фр╕кр╕нр╕Ъ Bonuses');
    results.push(await testEndpoint('POST', '/api/bonuses', testData.bonus));
  }
  
  // Test Commissions
  if (testData.commission) {
    console.log('\nЁЯУИ р╕Чр╕Фр╕кр╕нр╕Ъ Commissions');
    results.push(await testEndpoint('POST', '/api/commissions', testData.commission));
  }
  
  // Test Customer Transactions
  if (testData.customerTransaction) {
    console.log('\nЁЯФД р╕Чр╕Фр╕кр╕нр╕Ъ Customer Transactions');
    results.push(await testEndpoint('POST', '/api/customers/transactions', testData.customerTransaction));
  }
  
  // Test Simulate Transaction
  console.log('\nЁЯО▓ р╕Чр╕Фр╕кр╕нр╕Ъ Simulate Transaction');
  results.push(await testEndpoint('POST', '/api/simulate-transaction', {
    type: 'added'
  }));
  
  // Test GET endpoints
  console.log('\nЁЯУК р╕Чр╕Фр╕кр╕нр╕Ъ GET Endpoints');
  results.push(await testEndpoint('GET', '/api/dashboard'));
  results.push(await testEndpoint('GET', '/api/teams'));
  results.push(await testEndpoint('GET', '/api/members'));
  results.push(await testEndpoint('GET', '/api/customers'));
  results.push(await testEndpoint('GET', '/api/transactions'));
  results.push(await testEndpoint('GET', '/api/categories'));
  results.push(await testEndpoint('GET', '/api/salaries'));
  results.push(await testEndpoint('GET', '/api/bonuses'));
  results.push(await testEndpoint('GET', '/api/commissions'));
  results.push(await testEndpoint('GET', '/api/customers/transactions'));
  results.push(await testEndpoint('GET', '/api/customers/summary'));
  results.push(await testEndpoint('GET', '/api/customers/stats'));
  results.push(await testEndpoint('GET', '/api/customer-counts'));
  results.push(await testEndpoint('GET', '/api/health'));
  
  // Summary
  console.log('\nЁЯУЛ р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в');
  const successCount = results.filter(r => r.success).length;
  const failCount = results.length - successCount;
  
  console.log(`тЬЕ р╕кр╕│р╣Ар╕гр╣Зр╕И: ${successCount}/${results.length}`);
  console.log(`тЭМ р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: ${failCount}/${results.length}`);
  console.log(`ЁЯУИ р╕нр╕▒р╕Хр╕гр╕▓р╕Др╕зр╕▓р╕бр╕кр╕│р╣Ар╕гр╣Зр╕И: ${((successCount/results.length)*100).toFixed(1)}%`);
  
  if (failCount > 0) {
    console.log('\nтЭМ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕╡р╣Ир╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:');
    results.forEach((result, index) => {
      if (!result.success) {
        console.log(`  - Test ${index + 1}: Status ${result.status || 'Unknown'} - ${result.error || 'API Error'}`);
      }
    });
  }
  
  if (successCount === results.length) {
    console.log('\nЁЯОЙ р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓р╕кр╕│р╣Ар╕гр╣Зр╕Ир╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф! р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╣Др╕Фр╣Йр╕Ыр╕Бр╕Хр╕┤ 100%');
  } else if (successCount >= results.length * 0.9) {
    console.log('\nЁЯОЙ р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Ар╕Бр╕╖р╕нр╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф! р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╣Др╕Фр╣Йр╕Фр╕╡р╕бр╕▓р╕Б');
  } else {
    console.log('\nтЪая╕П р╕вр╕▒р╕Зр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓р╕Ър╕▓р╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╣Бр╕Бр╣Йр╣Др╕Вр╕Хр╣Ир╕н');
  }
  
  console.log('\nЁЯОЙ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕вр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!');
}

// Run tests
runFinalTest().catch(console.error);